import os
import threading
import pandas as pd
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc
from urllib.request import urlopen
import json
import plotly.express as px

# Initialize the app
app = dash.Dash(__name__)

# Define books as excel books to load in
books = [
    '2020_agesex_statistics.xlsx',
    # '2020_econ.xlsx',
    # '2020_income_benefit_data.xlsx'
]

# Get the path of the current working directory
cwd = os.getcwd()

# Dictionary to store the dataframes
dfs = {}

# Data loading function
def load_data():
    global dfs
    # Iterate through the books list
    for name in books:
        # Construct the full path to the .xlsx file
        file_path = os.path.join(cwd, name)

        # Load the Excel file using pandas
        xls = pd.ExcelFile(file_path)

        # Iterate through each sheet in the Excel file
        for sheet_name in xls.sheet_names:
            # Load each sheet as a separate DataFrame
            data = pd.read_excel(file_path, sheet_name=sheet_name, header=0)

            # Store the DataFrame in the dfs with sheet name as key
            dfs[sheet_name] = data

# Create a thread to load the data
data_loading_thread = threading.Thread(target=load_data)

# Start the data loading thread
data_loading_thread.start()

# Wait for the data loading thread to finish
data_loading_thread.join()

# List of corresponding dataframe names (keys from the dataframes_dict)
dataframe_names = list(dfs.keys())

''' Load a GeoJSON file containing the geometry information for US counties, 
    where feature.id is a FIPS code'''

with urlopen(
    'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
    ) as response:
    counties = json.load(response)

# Define a loading spinner component
loading_spinner = dbc.Spinner(html.Div("Loading data...", id="loading-output"))

# Define the main app layout
app.layout = html.Div([
    # Show the loading spinner while data is being loaded
    loading_spinner,
    # The main app layout will be displayed once data loading is complete
    html.Div(id="app-content", style={"display": "none"}),
    # Define the main layout containing the tabs
    html.H1('Selected Demographics for US States and Counties', 
            style={'textAlign': 'center'}),
    dcc.Tabs(
        id='tabs',
        value='tab-1',
        children=[
            dcc.Tab(label="Race, Age & Sex", value='tab-1', style={'width': '33.3%', 'textAlign': 'center'}),
            dcc.Tab(label="Economics", value='tab-2', disabled=True, style={'width': '33.3%', 'textAlign': 'center'}),
            dcc.Tab(label="Income & Benefits", value='tab-3', disabled=True, style={'width': '33.3%', 'textAlign': 'center'})
        ],
        style={'display': 'flex', 'justifyContent': 'space-between'}
    ),
])

# List of labels for the dropdown
dropdown_labels = ['DF_total_all',
                   'DF_total_whi',
                   'DF_total_baa',
                   'DF_total_aian',
                   'DF_total_aa',
                   'DF_total_nhop',
                   'DF_total_sor',
                   'DF_total_tom',
                   'DF_total_hol'
                   ]

# List of corresponding dataframe names (keys from the dataframes_dict)
dataframe_names = list(dfs.items())

# Combine the label names and dataframe names using the zip function
dataframe_options = [{'label': label, 'value': name} for label, name in zip(dropdown_labels, dataframe_names)]

us_state_options=[
        # Special value for the entire US
        {"label": "All States", "value": "ALL"},
        {"label": "Alabama", "value": "01"},
        {"label": "Alaska", "value": "02"},
        {"label": "Arizona", "value": "04"},
        {"label": "Arkansas", "value": "05"},
        {"label": "California", "value": "06"},
        {"label": "Colorado", "value": "08"},
        {"label": "Connecticut", "value": "09"},
        {"label": "Delaware", "value": "10"},
        {"label": "Florida", "value": "12"},
        {"label": "Georgia", "value": "13"},
        {"label": "Hawaii", "value": "15"},
        {"label": "Idaho", "value": "16"},
        {"label": "Illinois", "value": "17"},
        {"label": "Indiana", "value": "18"},
        {"label": "Iowa", "value": "19"},
        {"label": "Kansas", "value": "20"},
        {"label": "Kentucky", "value": "21"},
        {"label": "Louisiana", "value": "22"},
        {"label": "Maine", "value": "23"},
        {"label": "Maryland", "value": "24"},
        {"label": "Massachusetts", "value": "25"},
        {"label": "Michigan", "value": "26"},
        {"label": "Minnesota", "value": "27"},
        {"label": "Mississippi", "value": "28"},
        {"label": "Missouri", "value": "29"},
        {"label": "Montana", "value": "30"},
        {"label": "Nebraska", "value": "31"},
        {"label": "Nevada", "value": "32"},
        {"label": "New Hampshire", "value": "33"},
        {"label": "New Jersey", "value": "34"},
        {"label": "New Mexico", "value": "35"},
        {"label": "New York", "value": "36"},
        {"label": "North Carolina", "value": "37"},
        {"label": "North Dakota", "value": "38"},
        {"label": "Ohio", "value": "39"},
        {"label": "Oklahoma", "value": "40"},
        {"label": "Oregon", "value": "41"},
        {"label": "Pennsylvania", "value": "42"},
        {"label": "Rhode Island", "value": "44"},
        {"label": "South Carolina", "value": "45"},
        {"label": "South Dakota", "value": "46"},
        {"label": "Tennessee", "value": "47"},
        {"label": "Texas", "value": "48"},
        {"label": "Utah", "value": "49"},
        {"label": "Vermont", "value": "50"},
        {"label": "Virginia", "value": "51"},
        {"label": "Washington", "value": "53"},
        {"label": "West Virginia", "value": "54"},
        {"label": "Wisconsin", "value": "55"},
        {"label": "Wyoming", "value": "56"}
        ]

# Define the main layout containing the tabs
app.layout = html.Div([
    html.H1('Selected Demographibs for US States and Counties', 
            style={'textAlign': 'center'}),
    dcc.Tabs(
        id='tabs',
        value='tab-1',
        children=[
            dcc.Tab(label="Race, Age & Sex", value='tab-1', style={'width': '33.3%', 'textAlign': 'center'}),
            dcc.Tab(label="Economics", value='tab-2', disabled=True, style={'width': '33.3%', 'textAlign': 'center'}),
            dcc.Tab(label="Income & Benefits", value='tab-3', disabled=True, style={'width': '33.3%', 'textAlign': 'center'})
        ],
        style={'display': 'flex', 'justifyContent': 'space-between'}
    ),
])
# Page 1 layout
page_1_layout = html.Div([
    # Title for the US state dropdown
    html.H3('Select US State:'),

    # Dropdown for selecting US state
    dcc.Dropdown(
        id='us-state-dropdown',
        options=us_state_options,
        value='ALL'  # Default selected value (for example, set to 'ALL' for entire US)
    ),

    # Title for the dataframe dropdown
    html.H3('Select Dataframe:'),

    dcc.Dropdown(
    id='dataframe-dropdown',
    options=dataframe_options,
    value=dataframe_names[0]  # Default selected value (choose the first dataframe)
)

    # # Choropleth map component (replace 'choropleth-map' with the actual ID of your map component)
    # dcc.Graph(id='choropleth-map'),
])

# # Callback to update the choropleth map
# @app.callback(
#     Output('choropleth-map', 'figure'),  # Replace 'choropleth-map' with the actual ID of your map component
#     [Input('us-state-dropdown', 'value'), Input('dataframe-dropdown', 'value')]
# )
# def update_choropleth_map(selected_state, selected_dataframe):
#     # Your code to update the choropleth map based on the selected state and dataframe
#     # For example, if selected_state == 'ALL', display all FIPS codes for the entire US
#     # Else, display FIPS codes for the selected state
#     # Use the data from the selected_dataframe to populate the choropleth map
#     # ...

# Callback to display dataframe names and shapes
@app.callback(
    Output('dataframe-info', 'children'),
    [Input('dataframe-dropdown', 'value')]
)
def display_dataframe_info(selected_dataframe):
    # Get the selected dataframe based on the value from the dropdown
    selected_df = dfs.get(selected_dataframe)

    if selected_df:
        # If the selected dataframe exists, display its name and shape
        df_name = f"Selected Dataframe: {selected_dataframe}"
        df_shape = f"Dataframe Shape: {selected_df.shape}"
        return [html.H3(df_name), html.H3(df_shape)]
    else:
        # If the selected dataframe is not found, display an error message
        return html.H3('Selected Dataframe not found')

# page_2_layout = html.Div([
#     html.H2('Page 2 Content', style={'width': '100%'}),
#     # Add your content for page 2 here
# ])

# page_3_layout = html.Div([
#     html.H2('Page 3 Content', style={'width': '100%'}),
#     # Add your content for page 3 here
# ])

# Callback to show the main app layout when data is loaded
@app.callback(Output("app-content", "children"), [Input("loading-output", "children")])
def show_app_layout(loading_output):
    # The content will be displayed once data loading is complete
    return html.Div([
        # Replace this with your actual app layout
        html.H1("Your Dash App with Loaded Data!"),
        # Add the rest of your app components here...
    ])

# Callback to display Page 1 layout when the corresponding tab is selected
@app.callback(
    Output('page-content', 'children'),
    [Input('tabs', 'value')]
)
def display_page(tab_value):
    if tab_value == 'tab-1':
        return page_1_layout
    # elif tab_value == 'tab-2':
    #     return page_2_layout
    # elif tab_value == 'tab-3':
    #     return page_3_layout
    else:
        return '404 - Page not found'

if __name__ == '__main__':
    app.run_server(debug=True)